from vertexai.generative_models import (
    GenerationConfig,
    GenerativeModel,
    HarmBlockThreshold,
    HarmCategory,
    Part,
    Image
)

from typing import Dict, List, Optional, Union
from vertexai.generative_models._generative_models import PartsType, GenerationConfigType, SafetySettingsType, GenerationResponse
from typing import Tuple
import os
import json
from data_science.src.utils import load_env_variables
load_env_variables()

class AnalysisModel(GenerativeModel):

    default_system_instruction = [
        "You are a verification and summarization model tasked with analyzing security video footage and reviewing descriptions already generated by an upstream computer vision model (cv_model).",
        "The cv_model has already extracted detailed behavioral observations and scene descriptions from the video. You do not need to repeat the description process.",
        "Your primary responsibility is to watch the video and assess whether the cv_modelâ€™s interpretation is accurate and consistent with the visual evidence.",
        "You must provide a concise final judgment: (1) whether shoplifting occurred (Boolean: True/False), and (2) a numerical confidence score between 0 and 1 that reflects the certainty of your conclusion.",
        "Apply behavioral reasoning, movement tracking, and object interaction analysis to validate or refute the cv_model's claims. Focus solely on actions that directly support or negate the shoplifting hypothesis.",
        "Ensure your assessment is impartial and grounded only in the evidence from the video and the cv_model's observations. Avoid speculation beyond the data provided."
    ]

    default_prompt = """
           "Analyze the provided video and cv_model's observations to assess the likelihood of shoplifting. "
           "Determine if shoplifting has occurred and provide outputs labeled 'Shoplifting Detected' for the Boolean determination "
           "and 'Confidence Level' for the confidence score between 0 and 1."
    """

    default_response_schema = {
        "type": "object",
        "properties": {
            "Shoplifting Detected": {
            "type": "boolean"
            },
            "Confidence Level": {
            "type": "number"
            }
        },
        "required": [
            "Shoplifting Detected",
            "Confidence Level"
            ]
}

    default_generation_config = GenerationConfig(
        temperature=0,
        top_p=1.0,
        top_k=32,
        candidate_count=1,
        max_output_tokens=8192,
        response_mime_type="application/json",
        response_schema=default_response_schema
    )

    # Set safety settings.
    # Dont know what does it mean, need to investigate
    default_safety_settings = {
        HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
        HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
        HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
        HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
    }

    def __init__(self,
        model_name: str = os.getenv("DEFAULT_MODEL_ID"),
        *,
        generation_config: Optional[GenerationConfigType] = None,
        safety_settings: Optional[SafetySettingsType] = None,
        system_instruction: Optional[PartsType] = None,
        labels: Optional[Dict[str, str]] = None):

        if system_instruction is None:
            # system_instruction = Explation to the model to exaplin who he is, before it is given a specific task.
            system_instruction = self.default_system_instruction

        if generation_config is None:
            generation_config = self.default_generation_config

        if safety_settings is None:
            safety_settings = self.default_safety_settings

        super().__init__(model_name=model_name
                         , generation_config=generation_config
                         , safety_settings=safety_settings
                         , system_instruction=system_instruction
                         , labels=labels)


    def analyze_video_observations(self, video_file: Part, video_observations: str, prompt: str = None) -> Tuple[str, bool, float]:
        if prompt is None:
            prompt = self.default_prompt
        prompt += "The cv_model response here is: " + video_observations
        contents = [video_file, prompt]
        # Prompt the model to generate content
        analysis_model_response = self.generate_content(
            contents,
            generation_config=self._generation_config,
            safety_settings=self._safety_settings,
        )

        shoplifting_detected, confidence_level = self._extract_values_from_response(analysis_model_response)
        return analysis_model_response.text, shoplifting_detected, confidence_level

    def _extract_values_from_response(self, response: GenerationResponse) -> Tuple[bool, float]:
        response_json = json.loads(response.text)
        return response_json["Shoplifting Detected"], response_json["Confidence Level"]


